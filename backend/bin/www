var app = require('../app');
var db = require('../db/db');
var debug = require('debug')('backend:server');
var http = require('http').Server(app);
var io = require('socket.io')(http);
var passport = require('../functions/passport');
var jwt = require('jsonwebtoken');
var express = require('express');
var rp = require('request-promise');
require('dotenv').config();
var roomFunc = require('../functions/room');
var messageFunc = require('../functions/message');
var vkToken = process.env.VKTOKEN;

var vkAuth = require('vk-auth')(123456, 'audio');

io.on('connection', (socket) => {
  console.log('New user connected');

  socket.on('register', data => {
    try {
      passport.checkBody(data);
      passport.signUp(data.username, data.password);
    } catch (err) {
      console.error(err);
    }
  })
  socket.on('login', async data => {
    try {
      passport.checkBody(data);
      let user = await passport.logIn(data.username, data.password);
      if (user == 'Incorrect') {
        return io.emit('login', 'Incorrect');
      }
      user = JSON.stringify(user);
      let userToken = Buffer.from(user).toString('base64');
      io.emit('login', userToken);
    } catch (err) {
      console.error(err);
    }
  })
  socket.on('loginVk', async data => {
    try {
      passport.checkBody(data);
      vkAuth.authorize(data.username, data.password);

      vkAuth.on('error', function (err) {
        return io.emit('loginVk', 'Incorrect');
      });

      vkAuth.on('auth', function (tokenParams) {
        rp(`https://api.vk.com/method/users.get?user_id=${tokenParams.user_id}&v=5.52&access_token=${vkToken}`)
          .then(res => {
            res = Buffer.from(res).toString('base64');
            io.emit('loginVk', res);
          })
      })
    } catch (err) {
      console.error(err);
    }
  })

  socket.on('room', async data => {
    try {
      passport.checkBody(data);
      let room = await roomFunc.creatRoom(data);
      io.emit('room', room);
    } catch (err) {
      console.error(err);
    }
  })
  socket.on('rooms', async data => {
    try {
      let rooms = await db.Room.find({});
      io.emit('rooms', rooms);
    } catch (err) {
      console.error(err);
    }
  })
  socket.on('roomDelete', async data => {
    try {
      passport.checkBody(data);
      let roomDeleted = await db.Room.findOneAndRemove({ name: data });
      io.emit('roomDelete', roomDeleted);
    } catch (err) {
      console.error(err);
    }
  })
  socket.on('message', async data => {
    try {
      passport.checkBody(data);
      token = await messageFunc.sendMessage(data);
      if (token.response) {
        return io.emit('message', data[0]);
      }
      let user = await db.User.findOne({ username: token.username });
      if (user.role == 'User') {
        io.emit('message', data[0]);
      }
      passport.logInVk();
    } catch (err) {
      console.error(err);
    }
  })

  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

})

http.listen(3000, function () {
  console.log('listening on :3000');
});
